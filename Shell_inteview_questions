1. What is Shell?

    A Shell is basically a command-line interpreter between user and kernel or a complete environment specially designed to run commands, 
    shell scripts, and programs. In this, whenever a user enters human-readable commands (input commands) through the keyboard, 
    the shell communicates with the kernel to execute these commands, and display output in a shell script.

2. Why is a shell script needed?

    -> Keeping repetitive tasks to a minimum.
    -> Can be used by system administrators for routine backups.
    -> Monitoring the system.
    -> Adding new functions to the shell.
    -> Shell scripting allows you to create your own tools.
    -> System admin can automate daily tasks

3. Write some advantages of shell scripting.

    -> Shell scripts are easy to use and quicker to write.
    -> An interactive debugging tool, as well as a quick start.
    -> As shell scripts are written in an interpreted language, they can be run without any additional effort on almost any 
       modern operating system, including UNIX, Linux, BSD, and Mac OS X.
    -> Programmers need not change their syntax since both command and syntax are identical to those entered directly into the command line.
    -> It helps automate administrative tasks, so it is time-saving.  

4. Write some limitations of shell scripting.

    -> Errors are frequent and costly, and a single error can alter the command. 
    -> Large, complex tasks aren't well suited to it. 
    -> Every time a shell command is executed, a new process is launched.
    -> Bugs or inadequacies in the language's syntax or implementation. 

5. Name the file in which shell programs are stored.

    A file called sh stores shell programs. Sh files contain commands written in a scripting language 
    that is run by Unix shells.

6. Name different types of shells available.

    -->Shells are divided into two categories: 
        Bourne shell: The $ character is the default prompt when using a Bourne-type shell.
        C shell: The % character is the default prompt when using a C-type shell.
    -The Bourne-type is subdivided into the following categories:
        -> BASH
        -> KORN 
    -The C-type is subdivided into the following categories:   
        -> C-shell
        -> TOPS/TENEX shell

7. Write difference between Bourne Shell and C Shell.

        -Bourne Shell: It has compactness and speed that set it apart from other shells. But it lacks interactive features such
             as the ability to recall previous commands. Additionally, the Bourne shell does not support arithmetic and logical expressions.
        -C Shell: It is a UNIX enhancement that incorporates interactive features like aliases and history of commands. 
             Besides its built-in arithmetic and expression syntax, it also includes convenient programming features.
    Difference between Bourne shell and C shell  

        ->The C shell allows you to alias commands easily, whereas Bourne Shell does not allow this.
        ->In the C shell, long commands can be used repeatedly, but not in Bourne.
        ->Bourne does not have access to the command history, but the C shell does.
        ->In the case of C, there is no need to repeatedly type the command.

8. What do you mean by Shell variable?

    variables usually store data either in the form of characters or numbers. Shell also stores and manipulates 
    information using variables in its programs. Generally, shell variables are stored as strings. Variables in the shell 
    provide the information needed for scripts/commands to execute.

9. What are different types of variables mostly used in shell scripting?

    -System-defined variables: Also called environment variables, these are special built-in variables in the Linux kernel for each shell. 
                               They are normally defined in capital letters by the OS (Linux) and are standard variables.
    -User-defined variables: These variables are created and defined by users in order to store, access, read, and manipulate data. 
                              In general, they are defined in lowercase letters. The Echo command allows you to view them.

10. Explain the term positional parameters.

        A positional parameter is a variable within a shell program; its value is set from an argument specified
        on the command line that invokes the program. Positional parameters are numbered and are referred to with
        a preceding ``$'': $1, $2, $3, and so on. A shell program may reference up to 9 positional parameters.




1. What is Shell?

    A Shell is basically a command-line interpreter between user and kernel or a complete environment specially designed to run commands, 
    shell scripts, and programs. In this, whenever a user enters human-readable commands (input commands) through the keyboard, 
    the shell communicates with the kernel to execute these commands, and display output in a shell script.

2. Why is a shell script needed?

    -> Keeping repetitive tasks to a minimum.
    -> Can be used by system administrators for routine backups.
    -> Monitoring the system.
    -> Adding new functions to the shell.
    -> Shell scripting allows you to create your own tools.
    -> System admin can automate daily tasks

3. Write some advantages of shell scripting.

    -> Shell scripts are easy to use and quicker to write.
    -> An interactive debugging tool, as well as a quick start.
    -> As shell scripts are written in an interpreted language, they can be run without any additional effort on almost any 
       modern operating system, including UNIX, Linux, BSD, and Mac OS X.
    -> Programmers need not change their syntax since both command and syntax are identical to those entered directly into the command line.
    -> It helps automate administrative tasks, so it is time-saving.  

4. Write some limitations of shell scripting.

    -> Errors are frequent and costly, and a single error can alter the command. 
    -> Large, complex tasks aren't well suited to it. 
    -> Every time a shell command is executed, a new process is launched.
    -> Bugs or inadequacies in the language's syntax or implementation. 

5. Name the file in which shell programs are stored.

    A file called sh stores shell programs. Sh files contain commands written in a scripting language 
    that is run by Unix shells.

6. Name different types of shells available.

    -->Shells are divided into two categories: 
        Bourne shell: The $ character is the default prompt when using a Bourne-type shell.
        C shell: The % character is the default prompt when using a C-type shell.
    -The Bourne-type is subdivided into the following categories:
        -> BASH
        -> KORN 
    -The C-type is subdivided into the following categories:   
        -> C-shell
        -> TOPS/TENEX shell

7. Write difference between Bourne Shell and C Shell.

        -Bourne Shell: It has compactness and speed that set it apart from other shells. But it lacks interactive features such
             as the ability to recall previous commands. Additionally, the Bourne shell does not support arithmetic and logical expressions.
        -C Shell: It is a UNIX enhancement that incorporates interactive features like aliases and history of commands. 
             Besides its built-in arithmetic and expression syntax, it also includes convenient programming features.
    Difference between Bourne shell and C shell  

        ->The C shell allows you to alias commands easily, whereas Bourne Shell does not allow this.
        ->In the C shell, long commands can be used repeatedly, but not in Bourne.
        ->Bourne does not have access to the command history, but the C shell does.
        ->In the case of C, there is no need to repeatedly type the command.

8. What do you mean by Shell variable?

    variables usually store data either in the form of characters or numbers. Shell also stores and manipulates 
    information using variables in its programs. Generally, shell variables are stored as strings. Variables in the shell 
    provide the information needed for scripts/commands to execute.

9. What are different types of variables mostly used in shell scripting?

    -System-defined variables: Also called environment variables, these are special built-in variables in the Linux kernel for each shell. 
                               They are normally defined in capital letters by the OS (Linux) and are standard variables.
    -User-defined variables: These variables are created and defined by users in order to store, access, read, and manipulate data. 
                              In general, they are defined in lowercase letters. The Echo command allows you to view them.

10. Explain the term positional parameters.

        A positional parameter is a variable within a shell program; its value is set from an argument specified
        on the command line that invokes the program. Positional parameters are numbered and are referred to with
        a preceding ``$'': $1, $2, $3, and so on. A shell program may reference up to 9 positional parameters.

11. What are control instructions?

    Control instructions specify how the different instructions will be executed in the script. They are primarily used to determine
    the control flow in Shell programs. The execution of a shell script proceeds in succession without these instructions. 
    In shell programs, control instructions govern how execution flows.

12. How many types of control instructions are available in a shell?

    Shells provide four types of control instructions as given below:

       -> Sequence Control Instruction: This assures that a program's command runs in the sequence they are listed.
        As soon as the first command in the sequence has been completed, the second command follows, and so on.

       -> Decision Control Instruction: It is also known as Selection Control Instruction. This instructs the computer which 
        instruction it should execute next. In this, checking a condition is the basis for deciding which section to execute. 
        If a given condition is True, a statement or set of statements will be executed; otherwise, they will be ignored.

       -> Loop Control Instruction: It is also known as Repetition Instruction. This instruction allows a computer to continuously 
        run a particular sequence of code. In a loop structure, the statements can be repeated until a condition is True or False,
        a particular number of times, or once for each element within the collection

       -> Case-Control Instruction: This is used for selecting among several choices. Typically, they are used to execute only 
        a particular block of statements within a series of statements.

13.  Explain ways to create shortcuts in Linux.

    Links present in Linux OS can be used to create shortcuts as given below: 

       -> Hard Link: Hard links are mirror images of the originally linked files and are linked with an inode number. 
    A hard-linked file remains even after the original file is deleted. Since hard links point to inodes, they cannot be 
    implemented on directories. Hard links are created by the following command:
                    $ ln  [original filename] [link name]

       -> Soft Link: Generally, soft links (also referred to as Symbolic links) are linked to the file name and can reside on the 
    same as well as different file systems. When a soft link is created or deleted, it does not affect the original file, 
    but when the original file is deleted, the soft link stops working. Typically, soft links are aliases (alternative paths) 
    for the original file. Soft links are created by the following command:    
                    $ ln  -s [original filename] [link name]

14. How to check whether a link is a hard one or a soft link?

    We can use -h and -L operators of the test command to check whether a link is hard or soft (symbolic link).

        -h file      //true if the file is a symbolic link
        -L file      //true if the file is a symbolic link
    One can also use:
    readlink FILE; echo $?       // This returns 1 if it's a hard link and 0 if it's a symbolic link

15. Write difference between Hard link and Soft Link.

    Hard Link:
        - Hard-linked files have the same inode number.
        - Despite deleting the target file, it remains valid.
        - Hard links are faster than soft links. 
        - There is no way to use it across file systems. 
        - Hard links cannot use relative paths. 
    Soft Link:
        - Soft-linked files have different inode numbers.
        - When an original file is deleted, it becomes invalid.
        - Soft links are slower than hard links.
        - You can use it on any file system.
        - Both absolute and relative paths can be used in soft links. 

16. What do you mean by GUI Scripting?

        The GUI (Graphical User Interface) is a client/server interface that uses graphical icons and visual indicators to 
        allow users to interact with devices. Specifically, it is used to control a computer and its applications. 
        A wide variety of applications are supported, and it is largely dependent on the operating system.

17. What is the shebang line in shell scripting?

    Shell scripts or programs often contain shebang at the top. In general, the Shebang (the series of characters "#!") 
    is used to indicate the operating system to use a particular interpreter to process the rest of the file. 
    Here, the symbol '#' is referred to as hash, and "!" is referred to as bang. This usually aids developers in avoiding
    repetitive work. Scripts are generally executed by the engine; therefore, shebang determines the location of the engine 
    that will be used to run the script.

18. What is a file system? Write down the four core components of a Linux file system.

    Generally, file systems are referred to as the collections of files, which include information related to those files. 
    It would be impossible to tell where one piece of data stops and the next begins without a file system. There are four blocks 
    in a file system: 

    ->  Super Block: A superblock contains information about a file system, including block size, group size, usage statistics, 
        empty/filled blocks, inode table size & location, and so on. One of the tools used to describe a file system, along with inodes,
        entries, and files, is the superblock. Multiple superblocks are created with the file system, as the superblock contains 
        critical information.
    ->  Boot Block: Located on the disk label, a boot block is a special set of blocks that contains data or information on the disk 
        layout. Normally, this block contains the bootstrap loader program, which a user runs upon launching the host computer. 
        The boot block remains blank if the file system is not used for boot.
    ->  Data Block: Also called storage blocks, data blocks contain the remainder of the space allocated to the file system.
        The data block's size is measured at the time of file system creation. For a regular file, the content of files is contained 
        in the data blocks. For directories, the inode number and file name of the files are contained in the data blocks. 
    ->  Inode: Inodes contain information about each file in the filesystem. Normally, an inode doesn't contain a file's name, 
        which is located in a directory instead.  An inode contains information such as the type of file, the permission bits, 
        the owner, the group, the file size, and the time when the file was modified.

19. Explain the way you can connect to a database server.

    Open client driver comes with the isql utility that can be used to connect to a database server from Linux. Here's how to do it:
        isql –S serverName –U username –P password

20. What is the importance of $#?

    $# usually holds the number of arguments, although it may be different for functions. To put it simply, 
    it was used to store the number of command-line arguments passed to a shell script.

21. Name the command that can be used to find out the number of arguments passed to the script?

        echo $ #

22. How long does a variable in a shell script last?

    Variables inside shell scripts have a lifespan of only as long as the execution lasts.

23. What does the . (dot) indicate at the beginning of the file name? How can it be listed?

    If the file name begins with ".", it is a hidden file. When a dot appears at the beginning of a filename, 
    the file is hidden in most file managers and shell programs. A Shell usually lists all the files except hidden files 
    when you try to list the files in a shell. Despite this, hidden files can be found in the directory. 
    The Is command must be run with the "–a" flag if you wish to see hidden files.

24. What is the use of the "$?" command?

    By using the command "$?", you can find out the status of the last command executed.

25. What do you mean by crontab?

    Crontab stands for "cron table," meaning that it makes use of the cron scheduler to perform tasks.
    In other words, it is the list of commands that you wish to run on a regular schedule and the command that will let you manage it. 
    It is possible to view or edit the table of commands using the crontab command. In addition to the schedule, the term "Crontab" also 
    refers to the name of the program used to edit the schedule.

26. Name two files of crontab command.

    cron.deny and cron.allow are two files in the /etc/cron.d directory that controls access to the crontab command. 
    Crontab command tasks such as creating, editing, displaying, or removing crontab files are relegated to specific 
    users through these files. Both files usually consist of a list of user names, one user name per line. 
    Together, these access control files perform the following functions:

       -> cron.allow decides which users are allowed to run the crontab command.
       -> cron.deny decides which users are denied from using the crontab command.
       -> When cron.allow or cron.deny doesn't exist, superuser privileges are required to run it.

27. Write the difference between $* and $@

    Unlike $@, where each quoted argument is treated as a separate argument, 
    $* treats each positional parameter as a single argument.

                $*    ->	$1 $2 $3 … ${N}
                $@	  ->     $1 $2 $3 … ${N}
                "$*"  -> 	"$1c$2c$3c…c${N}"
                "$@"  -> 	"$1" "$2" "$3" … "${N}"

        eg: $ set -- "arg  1" "arg  2" "arg  3"

                $ for word in "$*"; do echo "$word"; done   
                        arg  1 arg  2 arg  3

                $ for word in "$@"; do echo "$word"; done    
                        arg  1
                        arg  2
                        arg  3

28. Name the command that is used to compare the strings in a shell script.

    To compare text strings, use the test command. By comparing each character in each string, the test command usually 
    compares text strings.  In most cases, tests are generally included as a conditional execution of shell commands.
    they can be used for Comparison of file attributes, Comparison of strings, Comparing basic arithmetic operations.

    test EXPRESSION
    test EXPRESSION && true-command
    test EXPRESSION || false-command
    test EXPRESSION && true-command || false-command

29. What do you mean by the “s” permission bit in a file?

    The SUID (Set User ID) bit is known as the "s" bit. SUIDS are special file permissions for executable files that 
    enable other users to run the file as the file owner. There will be an s (to indicate SUID) special permission for 
    the user instead of the normal x, which represents execute permissions. A file that has the "s" bit set will grant 
    the process the rights of the file's owner while the program is running.

    eg: Executing the "passwd" command to change the password, for example, allows the user to write the new password to 
    the shadow file even though its owner is "root.

30. How will you debug a shell script?

    With set, you can turn on or off debugging options in the shell:
    -> Set -x: This displays commands and their arguments as they are being executed.
    -> Set -v: It displays shell input lines in real-time as they are read

31. What is the importance of sed command and awk command?

    sed Command: sed command is an acronym for stream editor. It is used for editing a file without using an editor. 
    The SED command performs a variety of operations on files, such as searching, finding and replacing, inserting and deleting. 
    However, substitution or find and replace are the most commonly used features of SED.
        -> /u/user1/Shell_Scripts_2020> echo "Hi Gourav" | sed 's/Hi/Hello/'

    awk Command: The command is a scripting language generally used to manipulate data and generate reports. 
    There is no need to compile it and users are allowed to have access to a variable, string functions, numeric functions, 
    and logical operations.
        -> $0 -> For whole line (e.g. Hello Aisha)  
           $1 -> For the first field i.e. Hello  
           $2 -> For the second field

32. Write the difference between “=” and “==”.

    = operator: Assigning the value into a variable is accomplished by using the = operator. It is referred to as the 
      assignment operator.
    == operator: This is used to compare strings. In the double equals operator, both operands are compared. If they are equal, 
      it returns true, otherwise, it returns false.

33. Name different commands that are available to check the disk usage.

    df – It is used to find out how much space is left on a disk.
    du – With this command, you can find out how much disk space the specified files and each subdirectory take up.
    dfspace – Using this command, you can check the amount of free disk space in MB.

34. Explain how you will open a read-only file in Unix/Shell?

    You can open a read-only file by: vi –R <Filename>

35. $ uptime command used to know how long the system has been running.

36. What do you mean by metacharacters?

    In a data field or program, metacharacters are special characters that provide information about other characters. 
    In shells, they're called regular expressions.  A character that is neither a letter nor a number is generally considered
    a metacharacter. Using shell metacharacters, you can group together commands, redirect and pipe input/output, put commands 
    in the background, reduce the size of file names and path names, etc. You can use them as wildcards to specify a file name 
    without typing in the file's full name. The most common metacharacters are as follows:
        Asterisk (*): Use the * to match any character.
        Question Mark (?): It matches a single character in the filename.
        Brackets ([…]):  The metacharacters used here match some specified characters.
        Hyphen (-): When placed within [] (brackets), the - metacharacter matches a specified range.

37. Write the difference between $$ and $!

    -> You can use $$ to get the process id of the current process. However, $! displays the process id for a background 
       process that recently went away.

38. Write difference between grep and find command.

    Grep command: This command facilitates searching and displaying content based on regular expressions specified by the user.
    Using the Grep command, one can search in a file for patterns.
        eg: grep “apple” file1.txt                     //Displays all the lines with the word “apple” in the file1
            grep “apple” file1.txt  file2.txt          //Scan multiple documents and search the word “apple” in both files.
     Find command: The FIND command searches for files and folders based on their size, modification time, and access time.
     You can use this command to search files and directories. 
        eg: find –type  f                      // Command will find all the files
            find  –type  d                    //Command will find all the directories
            find .  –name file1.txt       //Command will find file1.txt in the current directory

39. 


        




*********** SCRIPTS ***************

-> scripts to install any service in ubuntu or RED HAT linux

#!/bin/bash

if grep -i ubuntu /etc/os-release >/dev/null
then
	PACKAGE_MANAGER=apt
fi

if grep -i 'red hat' /etc/os-release
then
	PACKAGE_MANAGER=yum
fi

if [ -z $1 ]
then
	echo enter the name of the package to want to install
	read PACKAGE
else
	PACKAGE=$1
fi

echo PACKAGE_MANAGER=$PACKAGE_MANAGER
echo PACKAGE=$PACKAGE

sudo $PACKAGE_MANAGER install $PACKAGE -y 



*** Parameter Substitution ***

#!/bin/bash

echo enter username or press enter to use default value
read username
echo ${username:-$(whoami)}

## uses as a default value and setting a default value. ##
#!/bin/bash
echo take one
echo ${var:-abc}
echo ${var}

echo take two
echo ${var:=abc}
echo ${var}

## check for the existance of essential variables ##

#!/bin/bash

echo check for existence of essential variables

: ${HOSTNAME?} ${USER?} 
echo if you see this step 1 worked

${COW?}
echo you shouldnt see this


## error message if no argument is provided ##

#!/bin/bash
echo ${1-?"Usage: $0 ARGUMENT"} 
echo string length of the argument is ${#1}


****** Pattern Matching operators *******

#!/bin/bash
#
# ...
# to test, use /usr/bin/blah

filename=${1##*/}
echo 'filename=${1##*/}'
echo "The name of the file is $filename"
directoryname=${1%/*}
echo 'directoryname=${1%/*}'
echo "the name of the directory is $directoryname"


#!/bin/bash
#
# ...
# to test, use /usr/bin/blah

filename=${1#*/}
echo 'filename=${1#*/}'
echo "The name of the file is $filename"
directoryname=${1%%/*}
echo 'directoryname=${1%%/*}'
echo "the name of the directory is $directoryname"



#!/bin/bash
BLAH=rababarabarabarara
clear

echo BLAH=$BLAH
echo 'the result of ##*ba is' ${BLAH##*ba} 
echo 'the result of #*ba is' ${BLAH#*ba} 
echo 'the result of %%ba* is' ${BLAH%%ba*}
echo 'the result of %ba* is' ${BLAH%ba*}


**** pattens and extended globbing ****

#!/bin/bash
shopt -s extglob
for i in *
do
	echo ${i%%*(.doc|.txt|.pdf)}
done


#!/bin/bash
shopt -s extglob
for i in *
do
	mv $i ${i%%*(.doc|.txt|.pdf)}  --> changes the name of files from x.doc.y.txt,z.pdf to x y z
done


##countdown script ##

#!/bin/bash

COUNTER=$1
COUNTER=$(( COUNTER * 60 ))

while true
do
	echo $COUNTER seconds remaining in break
	COUNTER=$(( COUNTER - 1 ))
	sleep 1
done

#!/bin/bash

COUNTER=$1
COUNTER=$(( COUNTER * 60 ))

while true
do
	echo $COUNTER seconds remaining in break ${2:-break}
	COUNTER=$(( COUNTER - 1 ))
	sleep 1
done


****else ******

#!/bin/bash
if [ -z $1 ]
then
	echo no argument provided please try again
	exit 1
fi

echo you only get here if an argument was provided


#!/bin/bash
if [-f $1 ]
	echo file exists
else
	echo file does not exists
fi



#!/bin/bash

echo -n "Enter a number: "
read NUM1
echo -n "Enter another number: "
read NUM2
echo -n "Enter a third number: "
read NUM3

if [ $NUM1 -ge $NUM2 ] && [ $NUM1 -ge $NUM3 ]
then
	echo $NUM1 is the largest number
elif [ $NUM2 -ge $NUM1 ] && [ $NUM2 -ge $NUM3 ]
then
	echo $NUM2 is the largest number
else
	echo $NUM3 is the largest number
fi


******** DISK and MEMORY SPACE ***********

#!/bin/bash

DISK_FREE=$(df -h | grep '/$' | awk '{ print $4 }')
MEM_FREE=free -m | grep mem | awk '{ print $4 }'

echo $DISK_FREE
echo $MEM_FREE

# DISK && MEMORY are true
if [ $DISK_FREE -le $(( 3 * 1024 )) ] && &[ $MEM_FREE -le 512 ]
then
	echo warning:low system resouce
	exit 9
fi

# DISK is true
if [ $DISK_FREE -le $(( 1024 * 3 )) ]
then
	echo warning: low disk space
	exit 8
fi
 
# MEMORY is true 
if [ $MEM_FREE -le 512 ]
then 
	echo warning: low memory space
	exit 7
fi

# print message if all is good
echo your system resources are all fine

********


#!/bin/bash

# RHCSA labs grading script - SvV
# version 0.1

# verify password settings
grep 'PASS_MIN_LEN      6' /etc/login.defs >/dev/null 2>&1 || echo you did not set minimal password length to 6
grep 'PASS_MAX_DAYS     90' /etc/login.defs >/dev/null 2>&1 || echo max password validity is not set to 90 days

# verify new users
for i in anna audrey linda lisa
do
        grep $i /etc/passwd >/dev/null 2>&1 || echo user $i does not exist
done

#verify new file in user homedirs
for i in anna audrey linda lisa
do
        ls /home/$i/newfile >/dev/null 2>&1 || echo no newfile in $i home directory
done

# verify user group membership
id anna | grep profs >/dev/null 2>&1 || echo anna is not a member of group profs
id audrey | grep profs >/dev/null 2>&1 || echo audrey is not a member of group profs
id linda | grep sales >/dev/null 2>&1 || echo linda is not a member of group sales
id lisa | grep sales >/dev/null 2>&1 || echo lisa is not a member of group sales

# check that accounts linda and lisa are locked
passwd -S linda | grep locked >/dev/null 2>&1|| echo user linda password is not locked
passwd -S lisa | grep locked>/dev/null 2>&1 || echo user linda password is not locked

# evaluate passwords for anna and audrey
sshpass -p "password" ssh -o StrictHostKeyChecking=no anna@localhost exit >/dev/null 2>&1 || echo password for anna not set correctly
sshpass -p "password" ssh -o StrictHostKeyChecking=no audrey@localhost exit >/dev/null 2>&1 || echo password for audrey not set correctly

echo grading completed



*********** case **************

#!/bin/bash

echo are you good?

read GOOD

GOOD=$(echo $GOOD | tr [:upper:] [:lower:])

case $GOOD in
yes,oui)
	echo that's nice
	;;
no)
	echo that's not so nice
	;;
*)
	okay
	;;
esac




######

#!/bin/bash

COUNTER=$1
COUNTER=$(( COUNTER * 60 ))

minusone(){
	COUNTER=$(( COUNTER - 1 ))
	sleep 1
}

while [ $COUNTER -gt 0 ]
do
	echo you still have $COUNTER seconds left
	minusone
done

[ $COUNTER = 0 ] && echo time is up && minusone
[ $COUNTER = "-1" ] && echo you now are one second late && minusone

while true
do
	echo you now are ${COUNTER#-} seconds late
	minusone
done


******** BREAK ***********

#!/bin/bash

# backup script that stops if insufficient disk space is available

if [ -z $1 ]
then
	echo enter the name of a directory to back up
	read dir
else
	dir=$1
fi

[ -d ${dir}.backup ] || mkdir ${dir}.backup

for file in $dir/*
do
	used=$( df $dir | tail -1 | awk '{ print $5 }' | sed 's/%//' )
	if [ $used -lt 98 ]
	then
		echo stopping: low disk space
		break
	fi

	cp $file ${dir}.backup
done



****** CONTINUE ********

#!/bin/bash

# convert file names to lower case if required

FILES=$(ls)

for file in $FILES
do
	if [[ "$file" != *[[:upper:]]* ]]; then
		echo "$file" doesn\'t contain uppercase
		continue
	fi

	OLD="$file"
	NEW=$(echo $file | tr '[:upper:]' '[:lower:]')

	mv "$OLD" "$NEW"
	echo "$OLD has been renamed to $NEW"
done


#############


#!/bin/bash

SERVICE_NAME=$1
RAM=$( free -m | grep mem | awk '{ print $4 }' )

if [ -z $1 ]
then
	echo " no argument provided.. please provide any "
	exit 1
fi

if [ $RAM -lt 256 ]
then 
	echo no memory available 
	exit 5;
fi

sudo yum install -y $@

for i in $@
do
	sudo systemctl enable --now $i
done



********* getops **********
#!/bin/bash
while getops “hs:” arg; do
case $arg in
	h) 
		echo “usage”
		;;
	s) 
		strenght=$OPTARG
		echo $strength
		;;
	esac
done


#######

#!/bin/bash
#makeusr [-u uid] [-g gid] [-i info] [-h homedir] [-s shell] username
	function usage
	{
			echo ‘usage: makeusr [-u uid] [-g gid] [-i info] [-h homedir] ‘
			echo ‘[-s shell] username
			exit 1
	}

	function helpmessage
	{
			echo "makeusr is a script ... "
			echo "blablabla"
	}

	while getopts "u:g:i:h:s:" opt; do
			case $opt in
				u ) uid=$OPTARG ;;
				g ) gid=$OPTARG ;;
				i ) info=$OPTARG ;;
				h ) home=$OPTARG ;;
				s ) shell=$OPTARG ;;
				? ) helpmessage ;;
				* ) usage ;;
			esac
	shift $(($OPTIND -1))
	done

	if [ -z "$1" ]; then
			usage
	fi

	if [ -n "$2" ]; then
			usage
	fi

	if [ -z "$uid" ]; then
			uid=500
			while cut -d : -f3 /etc/passwd | grep -x $uid
			do
				uid=$((uid+1)) > /dev/null
			done
	fi

	if [ -z "$gid" ]; then
			gid=$(grep users /etc/group | cut -d: -f3)
	fi

	if [ -z "$info" ]; then
			echo Provide information about the user.
			read info
	fi

	if [ -z "$home" ]; then
			home=/home/$1
	fi

	if [ -z "$shell" ]; then
			shell=/bin/bash
	fi

	echo $1:x:$uid:$gid:$info:$home:$shell >> /etc/passwd
	echo $1:::::::: >> /etc/shadow
	mkdir -p $home
	chmod 660 $home
	chown $1:users $home
	passwd $1




*********** Variables in Functions **********


#!/bin/bash
var1=A

my_function () {
	local var2=B
	var3=C
	echo "inside function: var1: $var1, var2: $var2, var3: $var3"
}

echo "before runninng function: var1: $var1, var2: $var2, var3: $var3"

my_function

echo "after running function: var1: $var1, var2: $var2, var3: $var3"


******* Menu script *********

#!/bin/bash

PS3='Enter your choice: '
options=("Option 1" "Option 2" "Option 3" "Quit")

select opt in "${options[@]}"
do
	case $opt in
		"Option 1")
			echo "you have selected option 1"
			;;
		"Option 2")
			echo "you have selected option 2"
			;;
		"Option 3")
			echo "you have selected $REPLY with is $opt"
			;;
		"Quit")
			break
			;;
		*) echo "invalid option $REPLY";;
	esac
done




****** TRAP *******

#!/bin/bash
trap "echo ignoring signal" SIGINT SIGTERM
echo pid is $$

while :
do
	sleep 60
done

*****

#!/bin/bash
tempfile=/tmp/tmpdata
touch $tempfile
ls -l $tempfile
trap "rm -f $tempfile" EXIT



*********** LAB 10  MENU **************


#!/bin/bash

PS3='Enter your choice'
OPTIONS=("see disk space" "check memory" "list users")

trap "ignoring ctrl-c" SIGINT

select opt in "{options[@]}"
do
	case $opt in
		"see disk space")
			df -h
			;;
		"check memory")
			free -m
			;;
		"list users")
			who
			;;
		*) echo "invalid option $REPLY";;
	esac
done


***** Arrays ********

#!/bin/bash

# scanning hosts on $NETWORK
echo enter the IP address of the network that you want to scan for available hosts
read NETWORK

# enabling some debugging so that we see what happens
set -x 
hosts=()
# below IFS is set at the same line as the read statement to make sure it affects the read statement only
# IFS is set to a space to make sure that as long as it finds a space after an item the script continues
while IFS= read -r line; do
	hosts+=( "$line" )
done < <( nmap -sn ${NETWORK}/24 | grep ${NETWORK%.*} | awk '{ print $5 }')
set +x

# the two lines below are for debugging only
echo press enter to continue
read

# and here we check that the array works as intended
for value in "${hosts[@]}"
do
	echo $value
done



*****storing cmd output in arrays with mapfile **********


#!/bin/bash

# generating SSH key for local user
[ -f /etc/.ssh/id_rsa ] || ssh-keygen

# scanning hosts on $NETWORK
echo enter the IP address of the network that you want to scan for available hosts
read NETWORK

# you can fill an array with command output in two ways. The lines below are not as efficient but also work
#hosts=()
#while IFS= read -r line; do
#	hosts+=( "$line" )
#done < <( nmap -sn ${NETWORK}/24 | grep ${NETWORK%.*} | awk '{ print $5 }')

# alternative notation
mapfile -t hosts < <(nmap -sn ${NETWORK}/24 | grep ${NETWORK%.*} | awk '{ print $5 }')

# this line shows debug information; useful while developing but can be removed now
for value in "${hosts[@]}"
do
	echo $value
done

PS3='which host do you want to setup? (Ctrl-C to quit) '
select host in "${hosts[@]}"
do
	case $host in
		*)
			echo you selected $host
			set -v
			ssh-copy-id root@$host
			scp /etc/hosts root@$host:/etc
			set +v
			echo this is enough for the proof of concept script
			;;
	esac

done


********* looping through Arrays ************

#!/bin/bash
# poem.sh: Pretty-prints one of the ABS Guide author's favorite poems.
# credits: TLDP Advanced Bash Scripting Guide

# Lines of the poem (single stanza).
Line[1]="I do not know which to prefer,"
Line[2]="The beauty of inflections"
Line[3]="Or the beauty of innuendoes,"
Line[4]="The blackbird whistling"
Line[5]="Or just after."
# Note that quoting permits embedding whitespace.

# Attribution.
Attrib[1]=" Wallace Stevens"
Attrib[2]="\"Thirteen Ways of Looking at a Blackbird\""
# This poem is in the Public Domain (copyright expired).

echo

tput bold   # Bold print.

for index in 1 2 3 4 5    # Five lines.
do
  printf "     %s\n" "${Line[index]}"
done

for index in 1 2          # Two attribution lines.
do
  printf "          %s\n" "${Attrib[index]}"
done

tput sgr0   # Reset terminal.
            # See 'tput' docs.

echo

exit 0



******** debugging output to a file **********


#!/bin/bash

# Use FD 15 to capture the debug stream caused by "set -x":
exec 15>/tmp/bash-debug.log
# Tell bash about it  (there's nothing special about 15, its arbitrary)
export BASH_XTRACEFD=15

# turn on debugging:
set -x

# run some commands:
cd /etc
find 
echo "that was it"

# Close the debugging:
set +x

# Close the file descriptor
exec 15>&-

# See what we got:
cat /tmp/bash-debug.log


######### debugging and correcting  #############

#!/bin/bash

COUNTER=$1
COUNTER=$(( COUNTER * 60 ))

minusone()({
	COUNNTER=$(( COUNTER - 1 ))
	sleep 1
}

while [ $COUNTER -gt 0 ]
do
	echo you still have $COUNTER seconds left
	minusonne
done

[ $COUNTER = 0 ] && echo time is up && minusone
[ $COUNTER = "-1" ] && echo you now are one second late && minusone

while true
do
	echo you now are ${COUNTER#-} seconds late
	minusone
done





















